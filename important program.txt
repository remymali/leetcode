//delete duplicate number from array

let arr=[1,2,3,4,2,3],newArr=[],i,j
let size=arr.length
for( i=0;i<=size;i++)
{
    for( j=i+1;j<=size;j++)
    {
       if(arr[i]===arr[j]) 
       {
        for(let k=i;k<size;k++)
        {
        arr[k]=arr[k+1]
        }
        size--
        i--
       }
       
    }
   
}
console.log(arr.filter((num)=>num!=undefined))

--------------------------------------------------------------==============================================================
let arr=[1,2,3],newArr=[]
let n=arr.length
let k=0
for(let i=0;i<2*n;i++)
{
   
    newArr[i]=arr[k]
    k++
     if(i==2)
    {
       k=0
    }
    
}
console.log(newArr)

output=>[1,2,3,1,2,3]
============================================================
Question convert[1,2,3] to 123 then add 1 =124 then print 
as array=[1,2,4]

let arr=[1,2,3]
let val=''
for(let i=0;i<arr.length;i++)
{
    
    val+=arr[i]
}
let n =val.length
let num=Number(val)+1
for(let i=n-1;i>=0;i--)
{
    let lastDigit=num%10
    arr[i]=lastDigit
    num=Math.floor(num/10)
}

console.log(arr)
============================================================insert a value to arrary in a particular index
function insert(arr,index)
{
  let n=arr.length
  let temp=0
  for(let i=0;i<=n;i++)
  {
    if(i==index)
    {
      for(let j=n;j>i;j--)
      {
        arr[j]=arr[j-1]
      }
      arr[i]=100
    }
  }
  console.log(arr)
}
let arr=[1,2,3,4]
insert(arr,2)
========================================================
compare two string str1=["abcd"]
str2=["abcde"]
const str = ["abcd"];
 const string=str.toString()  
console.log(string)

for (let i = 0; i < string.length; i++) {
  const char = string[i];
  const asciiValue = string.charCodeAt(i);
  console.log(`Character: ${char}, ASCII Value: ${asciiValue}`);
}
=======================================================
Reverse an arrays
let arr=[1,2,3,4,5]
let n=arr.length/2
for(let i=0;i<n;i++)
{
  let temp=arr[i]
  arr[i]=arr[arr.length-i-1]
  arr[arr.length-i-1]=temp
}
console.log(arr);
=========================================================
function primeNumber(n)
{
  if(n<2)
  {
    return false
  }
  for(let i=2;i<Math.sqrt(n);i++)
  {
    if(n%i===0 && n!=2)
    {
      return false
    }
  
  }
  return true
}
let result=primeNumber(51)
console.log(result)
if(result)
console.log("Prime Number")
else
console.log("Not a Prime Number")
============================================================
//peak elements
let arr=[1, 2, 1, 3, 5, 6, 4];
let peakElement=[]
for(let i=0;i<=arr.length;i++)
{
if(arr[i]>arr[i-1]&& arr[i]>arr[i+1])
{
 peakElement.push(arr[i])
}
}
console.log(peakElement)
============================================================
//
let words=['cool','lock','cook']
let first= new Set(words[0])
let arr=[]
for(let i=1;i<words.length;i++)
{
    let second=new Set(words[i])
    first.forEach((val)=>{
       if( !second.has(val))
        {
            first.delete(val)
        }
      
    });
}
console.log(first)
============================================================
if it is an integer push to array, if 'c' then remove the previous value from array,if '+' then add previous two numbers in array

let ops=["5","2","C","D","+"]
let arr=[]
let sum=0
for(let i=0;i<ops.length;i++)
{
    let val=ops[i]
    switch(val)
    {
        case 'C':
            arr.pop()
            break;
        case 'D':
        arr.push(arr[arr.length-1]*2)
        break;
        case '+':
            arr.push(arr[arr.length-1]+arr[arr.length-2])
            break;
        default:
            arr.push(Number(val))
            break;

    }
    
}
console.log(arr)
for(let i=0;i<arr.length;i++)
{
    sum+=arr[i]
}
console.log(sum)
============================================================
Given an integer num, returns the number of digits in num that divides num
An integer val divides nums if nums%val==0

*********************************
let num=7,count=0
let value=num.toString()
for(let i=0;i<value.length;i++)
{
    if(value%value[i]===0)
    {
        count++
    }
}
console.log(count)
**********************************

given an array of positive integers sorted in a strictly increasing order and an integer k return the kth positive integer that is missing from this array

let arr=[]
for(let i=1;i<=1000;i++)
{
    arr[i]=i
}
let k=2
let arr2=[1,2,3,4]
let newArr=[]
let result
let size=arr2.length
for(let i=0;i<arr2.length;i++)
{
    for(let j=0;j<arr.length;j++)
    {
        if(arr2[i]===arr[j])
        {
            for(let m=j;m<1000;m++)
            {
                arr[m]=arr[m+1]
            }
            break
        }
        
    }
}
console.log(arr[k-1])
============================================================
Given two array of unique digits num1 and num2 returns the smallest number that contains at least one digit from each array

let num1=[3,5,2,6],num2=[1,7]
let smallest=""
let common=[]
for(let i=0;i<num1.length;i++)
{
    if(num2.includes(num1[i]))
    {
        common.push(num1[i])
    }
}
console.log("Common=",common)
let small=Number.MAX_VALUE
for(i=0;i<=num1.length;i++)
{
    
    if(num1[i]<small)
    {
        small=num1[i]
    }
}
console.log(small)
let first=small
small=Number.MAX_VALUE
for(i=0;i<=num2.length;i++)
{
    
    if(num2[i]<small)
    {
        small=num2[i]
    }
}
console.log(small)
if(first<small)
{
smallest+=first
smallest+=small
}
else
{
    smallest+=small
    smallest+=first
}
let min=Number.MAX_VALUE
if(common.length)
{
    for(i=0;i<common.length;i++)
    {  
        if(common[i]<min)
        min=common[i]
    }
    console.log(min)
}
else{
console.log(Number(smallest));
}
============================================================
Given an array arr of integers,check if there exist two indices i and j such that:
i!=j,0<=i ,j< arr.length,  arr[i]== 2*arr[j]
***************************************************

let arr=[3,1,7,11]
function check(arr)
{
for(let i=0;i<arr.length;i++)
{
    for(let j=0;j<arr.length;j++)
    {
        if(i!=j)
        {
            if(arr[i]===2*arr[j])
            return true
        }
    }
}
return false
}
console.log(check(arr))
******************************************************
======================================================
To determine if string s is a subsequence of string t
input s='abc' t='ahbgdc output=true
but s="axc" t="ahbgdc" output =false
=======================================================
let s='abc'
let t='ahgdc'
let flag=true
for(let x of s)
{
   flag=t.includes(x)
   if(flag==false)
   break
}
console.log(flag)
*******************************************************
list of numbers nums and a value k, and you want to determine if there are two distinct indices i and j in the list such that nums[i] == nums[j] and the absolute difference between i and j is at most k. If such indices exist, the output should be True; otherwise, it should be False.
========================================================
function analyse(arr,k)
{

for(let i=0 ;i<arr.length;i++)
{
  for(let j=i+1;j<arr.length;j++)
  {
    if(arr[i]===arr[j] )
      {
       if(Math.abs(j-i)<=k)
       return true
      }
  }
}
 return false
}
let arr=[1,2,3,1], k=3
console.log( analyse(arr,k))
=========================================================
let str="abbaca"
let newStr=[]
for(let j=0;j<str.length;j++)
{
for(let i=0;i<str.length;i++)
{
    if(str[i]===str[i+1])
    {
        str=str.slice(0,i)+str.slice(i+2)
    }
    

}

}
console.log(str)
*******************************************
 string is immutable that's  why it didn't work
 logic is correct but it didnt worked because it is a string
let str="abbaca"
let newstr=str.split('')
let size=newstr.length
for(let i=0;i<size;i++)
{
if(newstr[i]===newstr[i+1])
{
    for(let j=i;j<size;j++)
    {
        newstr[j]=newstr[j+2]
    }
    i-=2
    size-=2
    newstr.length = size; 
}
}
console.log(newstr)
=========================================================
let word1="abc"
let word2="pqr",i=0,newStr=""

while(i<word1.length ||i<word2.length)
{
    if(i<word1.length)
    {
    newStr+=word1[i]
    }
    if(i<word2.length)
    {
    newStr+=word2[i]
    }
 i++
}
console.log(newStr)
***********************************************************
output=>apbqcr
============================================================
function div(num)
{

count=0
do{
if(num%2==0)
{
   num=num/2
   
count++
}
else{
   num=num-1
   
count++
}
}while(num>0)
return count
}
let num=123

console.log(div(num))
****************************
output=12
============================================================
let arr1=[2,3,1,3,2,4,6,7,9,2,19]
let arr2=[2,1,4,3,9,6]
let newarr=[]

const containing=arr1.filter(item=>arr2.includes(item))
newarr.push(...containing)
const remaining=arr1.filter(item=>!arr2.includes(item))
newarr.push(...remaining)

console.log(newarr)
============================================================
Example 1:

Input: s = "leetcode"
Output: 2
Explanation: The substring "ee" is of length 2 with the character 'e' only.
Example 2:

Input: s = "abbcccddddeeeeedcba"
Output: 5
Explanation: The substring "eeeee" is of length 5 with the character 'e' only.
***********************************************
Answer:


var maxPower = function(s) {
    let count=1
    let firstCount=0
      
    for(i=0;i<s.length;i++)
    {
        if(s[i]===s[i+1])
        {
            count++;
        }
        else
        {
            count=1;
        }
        if(count>firstCount)
        {
        firstCount=count;
        }
        
       
    }
    return firstCount;
}
============================================================

You are given an integer n and an integer start.

Define an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.

Return the bitwise XOR of all elements of nums.

 

Example 1:

Input: n = 5, start = 0
Output: 8
Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.
Where "^" corresponds to bitwise XOR operator.
Example 2:

Input: n = 4, start = 3
Output: 8
Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.
var xorOperation = function(n, start) {
    let value=0
    for(i=0;i<n;i++)
    {
        value^=start+2*i
       
         
    }
    return value
};
============================================================
A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.

Given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.

 

Example 1:

Input: arr = [3,5,1]
Output: true
Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.
Example 2:

Input: arr = [1,2,4]
Output: false
Explanation: There is no way to reorder the elements to obtain an arithmetic progression.
var canMakeArithmeticProgression = function(arr) {
   
  const sortArr=arr.sort((a,b)=>a-b)
  const result =sortArr[1]-sortArr[0]
  for(i=1;i<sortArr.length-1;i++)
  {   
   let dif=Math.abs(sortArr[i+1]-sortArr[i])
   
        if(dif!==result)
        return false
  }
  return true
 
};
===============================================================
Example 1:

Input: date = "20th Oct 2052"
Output: "2052-10-20"
Example 2:

Input: date = "6th Jun 1933"
Output: "1933-06-06"
Example 3:

Input: date = "26th May 1960"
Output: "1960-05-26"
 Answer
****************
var reformatDate = function(date) {
const months=["Jan","Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
const item=date.split(' ')
const day =item[0].match(/\d+/)
const month=months.indexOf(item[1])+1
const year=item[2]
return(year+'-'+(month>9?month:'0'+month)+'-'+(day>9?day:'0'+day))
};
*****************
<<<<<<< HEAD
1688 question leetcode
----------------------
Example 1:

Input: n = 7
Output: 6
Explanation: Details of the tournament: 
- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.
- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.
- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
Total number of matches = 3 + 2 + 1 = 6.
**********************
var numberOfMatches = function(n) {
  let total=0
  if(n===1)
  return n

  while(n>1)
  {
  let team=n
  let matches=0
  if(n%2===0)
  {
       matches=n/2
       team=n/2
  }
 
  else
  {
      matches=(n-1)/2
      team=((n-1)/2)+1
  }
  total+=matches
  n=team
  }
  return total;
};
*********************
leetcode Qno.1816. Truncate Sentence
// let s = "What is the solution to this problem", k = 4
// var truncateSentence = function(s, k) {
//     let arr=s.split(' ')
//     let output=[]
//     for(let i=0;i<k;i++)
//     {
       
//       output.push(arr[i])
//     }
//      return output.join(' ')
// };
// console.log(truncateSentence(s,k))


output:"What is the solution"
***************************************
leetcode Qno.2016. Maximum Difference Between Increasing Elements

var maximumDifference = function(nums) {
    let maximumDiff=Number.MIN_VALUE
    for(i=0;i<nums.length;i++)
    {
        for(j=i+1;j<nums.length;j++)
        {
            if(i!==j)
            {
              let diff=  nums[j]-nums[i]
              if(diff>maximumDiff)
              {
                maximumDiff=diff
              }
            }
        }
    }
    if(maximumDiff===Number.MIN_VALUE)
    {
        return -1
    }

    return maximumDiff
};
***************************************
Question:2351
Given a string s consisting of lowercase English letters, return the first letter to appear twice
-------------------------------------------------------
var repeatedCharacter = function(s) {
    
    for(i=0;i<s.length;i++)
    {
        for(j=0;j<i;j++)
        {
            if(s[i]===s[j])
            return s[i]
        }
    }
    return ''
};
----------------------------------------------------------
question 1512
Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j. 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

Answer:var numIdenticalPairs = function(nums) {
    let count=0
    for(i=0;i<nums.length;i++)
    {
        for(j=i+1;j<nums.length;j++)
        {
            if(nums[i]==nums[j] && i<j)
                count++
        }
    }
    return count
};
================================================================


2562. Find the Array Concatenation Value
Answer:var findTheArrayConcVal = function(nums) {
    let sum = 0;

    while(nums.length) {
        const first = nums.shift();
        const last = nums.pop();
        const concat = first?.toString() + last?.toString();
        sum += parseInt(concat);
    }

    return sum;
};
================================================================
2578. Split With Minimum Sum
var splitNum = function(num) {
    let newNum = num.toString().split('').map((str) => +str);
    console.log(newNum.sort())
    let first = 0;
    let second = 0;
    let sum = 0;

    for(i=0;i<newNum.length;i++) {      
        
      
        if(i%2===0 )
       
        first =first*10+newNum[i]

       else {
            second=second*10+newNum[i]
        }
        
        
    }
    
    sum = first + second;
    return sum;
};
===================================================
66 plus one
var plusOne = function(digits) {
    let arr = [...digits];

    // Increment the last element if it's less than or equal to 9
    if (arr[arr.length - 1] <= 9) {
        arr[arr.length - 1] = arr[arr.length - 1] + 1;
    }

    // Handle the case where the last element is 9
    for (let i = arr.length - 1; i > 0; i--) {
        if (arr[i] >= 10) {
            arr[i] = 0;
            arr[i - 1]++;
        }
    }

    // If the first digit is 10, add a new digit
    if (arr[0] === 10) {
        arr[0] = 0;
        arr.unshift(1);
    }

    console.log(arr);
    return arr;
};

================================================

Question number :2729. Check if The Number is Fascinating

solution
--------
var isFascinating = function(n) {
    let result="",sum=0
    for(i=1;i<=3;i++)
    result+=n*i
    let newResult=result.split('').map(Number).sort().join('')
    if(newResult==="123456789")
    return true
    else
    return false
    
};
===========================================
question:153. Find Minimum in Rotated Sorted Array
---------------
Answer:
var findMin = function(nums) {
    let arr =nums.sort((a,b)=>a-b)
    return arr[0]
};

===============================================
question:1342. Number of Steps to Reduce a Number to Zero
var numberOfSteps = function(num) {
    let i=0
    while(num!=0)
    {
    if(num%2==0)
    num=num/2
    else
    num=num-1
    i++
    }
    return i
};
=================================================

question:2839. Check if Strings Can be Made Equal With Operations I
answer: var canBeEqual = function(s1, s2) {
    s1=s1.split('')
    let j=0
    if(s1===s2)
    return true
    else
    {
        for(let i=0;i<4;i++)
        { 
         if(i<2)   
        j=i+2
        else
        j=i-2
        let temp=s1[i]
        s1[i]=s1[j]
        s1[j]=temp
        let newS1=s1.join('')
        if(newS1===s2)
      return true
        }
       
        return false


    }
};
========================================================
question:217. Contains Duplicate
answer:var containsDuplicate = function(nums) {
  let newArr=new Set(nums)
  if(nums.length===newArr.size)
  return false
  else
  return true
  l
    
};
======================================================
question: 2848. Points That Intersect With Cars
answer:var numberOfPoints = function(nums) {
   let point= new Set()
   for(const[start,end] of nums)
   {
       for(i=start;i<=end;i++)
       {
           point.add(i)
       }
   }
   return point.size
};
========================================================
question:2859. Sum of Values at Indices With K Set Bits
answer:var sumIndicesWithKSetBits = function(nums, k) {
    let sum=0
    for(let i=0;i<nums.length;i++)
    {
        let binary=i.toString(2)
       let arr= binary.split('')
       let count=0
       for(let j=0;j<arr.length;j++)
       {
           if(arr[j]==='1')
           {
               count+=1
           }
       }
       if(count===k)
       {
       sum+=nums[i]
       }
    }
    return sum
};
========================================================
Question: 2839. Check if Strings Can be Made Equal With Operations I
var maximumTripletValue = function(nums) {
    let big=(nums[0]-nums[1])*nums[2]
    for(let i=0;i<nums.length;i++)
    {
        for(let j=i+1;j<nums.length;j++)
        {
            for(k=j+1;k<nums.length;k++)
            { 
                let result=((nums[i]-nums[j])*nums[k]);
                if(result>big)
                {
                    big=result;
                }
                
            }
        }
    }
    if( big<0)
    {
     return 0
    }             
    return big   
                
};
===============================================================
question:2894. Divisible and Non-divisible Sums Difference
var differenceOfSums = function(n, m) {
    let num1=0
    let num2=0
    for(i=0;i<=n;i++)
    {
        if(i%m!=0)
        {
          num1+=i
        }
        else
        {
            num2+=i
        }
    }
    return num1- num2
};
===============================================================
2908. Minimum Sum of Mountain Triplets I
var minimumSum = function(nums) {
    const triplet=[]
    for(let i=0;i<nums.length-2;i++)
    {
        for(let j=i+1;j<nums.length-1;j++)
        {
            for(let k=j+1;k<nums.length;k++)
            {
                if(i<j<k && nums[i] < nums[j] && nums[k] < nums[j])
                {
                    triplet.push(nums[i]+nums[j]+nums[k])
                }
            }
        }
    }

    if(triplet.length<=0)
    return -1
    else 
    {
        let lowestsum=triplet[0]
        for(const tri of triplet)
        {
            if(lowestsum>tri)
            {
                lowestsum=tri
            }
        }
        return lowestsum
    }
};
=======================================================


Question:58. Length of Last Word

Answer : var lengthOfLastWord = function(s) {
    let newS=s.trim()
  
    let count=0
    for(i=newS.length-1;i>0;i--)
    {
       count++ 
        
        if(newS[i]===" ")
        {
           
            return count-1
        }
    }
     
    return  s.trim().length
    
};
============================================================

question:13. Roman to Integer
Answer:var romanToInt = function(s) {
    let sum=0
   const example={
        'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000
   }
    for(let i=0;i<s.length;i++)
    {
        console.log(s[i])
      const curr=example[s[i]]
      const next=example[s[i+1]]

      if(curr<next)
      {
      sum+=next-curr
      i++
      }else
        {
            sum+=curr
        }
        
    }
    return sum
};
=================================================================
question:169. Majority Element
answer:var majorityElement = function(nums) {
    let n=nums.length,count=0
    if(n===1)
    return nums[0]
    for(let i=0;i<n;i++)
    {
        count=0
        for(let j=0;j<n;j++)
        {
            if(nums[i]===nums[j])
            count++
        }
        if(count>=n/2)
        return nums[i]
       
    }

};
======================================================================
question:27. Remove Element
answer:var removeElement = function(nums, val) {
    let n=nums.length
    let j=0
    for(i=0;i<n;i++)
    {
        if(nums[i]!==val)
        {
         nums[j]=nums[i]
         j++
        }
    }
    
      
    
    return j
};
=========================================================================